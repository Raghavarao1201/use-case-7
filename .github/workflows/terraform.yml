name: Terraform usecase7

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

permissions:
  id-token: write
  pull-requests: write
  contents: write

jobs:
  terraform:
    name: Terraform Actions with Linting and Security
    runs-on: ubuntu-latest

    outputs:
      cluster_name: ${{ steps.get_eks_cluster_name.outputs.cluster_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GithubActionsTerraform

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: "1.3.0"

      # TFlint Integration
      - name: Install TFlint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version
        working-directory: ./

      - name: Run TFlint
        id: tflint
        run: tflint --init && tflint -f compact
        working-directory: ./terraform

      # Terraform Steps
      - name: Initialize Terraform
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=terraform.tfstate" -backend-config="region=${{ secrets.AWS_REGION }}"
        working-directory: ./terraform

      - name: Validate Terraform
        id: validate
        run: terraform validate
        working-directory: ./terraform

      - name: Generate Terraform Plan
        id: plan
        run: terraform plan -lock=false > plan.txt
        working-directory: ./terraform

      - name: Create Plan Output Text File
        id: plan_report
        run: |
          mkdir -p reports
          echo "#Deployment Report" > reports/report.txt
          echo "This file was generated during the github actions workflow run." >> reports/report.txt
          echo "" >> reports/report.txt
          echo "## Terraform Plan Output" >> reports/report.txt
          cat plan.txt >> reports/report.txt
        working-directory: ./

      - name: Commit and push the report
        run: |
          git config --global user.name "Raghavarao1201"
          git config --global user.email "raghavaraomachiraju@gmail.com"
          git add reports/report.txt
          git commit -m "Add deployment report"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./

      # Checkov Integration
      - name: Install Checkov
        run: |
          pip3 install --upgrade pip
          pip3 install checkov

      - name: Run Checkov
        id: checkov
        run: checkov -d ./terraform --framework terraform --soft-fail
        working-directory: ./

      - name: Comment Plan to Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('./plan.txt', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.event.pull_request.number,
              body: planOutput
            });

      - name: Apply Terraform
        id: apply
        run: terraform apply -auto-approve -lock=false -no-color
        working-directory: ./terraform
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

      - name: Get EKS Cluster Name from Output
        id: get_eks_cluster_name
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Retrieving EKS cluster name..."
          pwd
          ls -al .terraform*
          terraform state list
          terraform output
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          echo "Cluster name (after output -raw): $CLUSTER_NAME"
          echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
        working-directory: ./terraform
        outputs:
          cluster_name: ${{ env.CLUSTER_NAME }} # Keeping this for now, will correct later if needed

      - name: Set up kubectl
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: Azure/setup-kubectl@v4.0.0
        with:
          install-location: '/usr/local/bin'

      - name: Update kubeconfig
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          aws eks update-kubeconfig --name "${{ steps.get_eks_cluster_name.outputs.cluster_name }}" --region "${{ secrets.AWS_REGION }}" --kubeconfig ~/.kube/config
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to EKS
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd k8s/
          kubectl apply -f service-account.yml
          kubectl apply -f appointment-deployment.yml
          kubectl apply -f appointment-service.yml
          kubectl apply -f patient-deployment.yml
          kubectl apply -f patient-service.yml
        working-directory: ./
