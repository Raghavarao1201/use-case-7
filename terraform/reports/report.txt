#Deployment Report
This file was generated during the github actions workflow run.

## Terraform Plan Output
[command]/home/runner/work/_temp/fe165047-1223-458a-b6b9-eb98dd1430cc/terraform-bin plan -lock=false
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=154767946691][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # module.eks.aws_eks_cluster.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "eks_cluster" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "health-eks-cluster"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags_all                      = (known after apply)
      [32m+[0m[0m version                       = (known after apply)

      [32m+[0m[0m access_config (known after apply)

      [32m+[0m[0m kubernetes_network_config (known after apply)

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = false
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_eks_fargate_profile.eks_fargate_profile[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_fargate_profile" "eks_fargate_profile" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m cluster_name           = "health-eks-cluster"
      [32m+[0m[0m fargate_profile_name   = "fargate-profile"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m pod_execution_role_arn = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)

      [32m+[0m[0m selector {
          [32m+[0m[0m namespace = "default"
        }
      [32m+[0m[0m selector {
          [32m+[0m[0m namespace = "kube-system"
        }
    }

[1m  # module.eks.aws_security_group.fargate_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "fargate_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 3000
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3000
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 3001
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 3001
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 80
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 80
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "health-eks-cluster-fargate-sg-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Name" = "health-eks-cluster-fargate-sg"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Name" = "health-eks-cluster-fargate-sg"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.iam.aws_iam_policy_attachment.ecr_puller_sa_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "ecr_puller_sa_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "health-eks-cluster-ecr-sa-policy-attachment"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "health-eks-cluster-ecr-sa-role",
        ]
    }

[1m  # module.iam.aws_iam_policy_attachment.eks_cluster_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "eks_cluster_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "health-eks-cluster-cluster-policy-attachment"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "health-eks-cluster-cluster-role",
        ]
    }

[1m  # module.iam.aws_iam_policy_attachment.eks_fargate_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "eks_fargate_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "health-eks-cluster-fargate-policy-attachment"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "health-eks-cluster-fargate-role",
        ]
    }

[1m  # module.iam.aws_iam_policy_attachment.eks_vpc_cni_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "eks_vpc_cni_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m name       = "health-eks-cluster-vpc-cni-policy-attachment"
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m roles      = [
          [32m+[0m[0m "health-eks-cluster-cluster-role",
        ]
    }

[1m  # module.iam.aws_iam_role.ecr_puller_sa_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "ecr_puller_sa_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "health-eks-cluster-ecr-sa-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Name" = "health-eks-cluster-ecr-sa-role"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Name" = "health-eks-cluster-ecr-sa-role"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.iam.aws_iam_role.eks_cluster_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "health-eks-cluster-cluster-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.iam.aws_iam_role.eks_fargate_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "eks_fargate_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks-fargate-pods.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "health-eks-cluster-fargate-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.vpc.aws_eip.nat_eip[0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m ipam_pool_id         = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m ptr_record           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.test_igw[0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "test_igw" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags_all = (known after apply)
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.nat_gw[0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gw" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.private_route_table[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m nat_gateway_id             = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public_route_table[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public_route_table" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"
              [32m+[0m[0m gateway_id                 = (known after apply)
                [90m# (11 unchanged attributes hidden)[0m[0m
            },
        ]
      [32m+[0m[0m tags_all         = (known after apply)
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public_route_association_1[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_route_association_1" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public_route_association_2[0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public_route_association_2" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private_subnet_1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private_subnet_2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public_subnet_1[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_1" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public_subnet_2[0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_2" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = true
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags_all                                       = (known after apply)
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.test_vpc[0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "test_vpc" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = (known after apply)
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags_all                             = (known after apply)
    }

[1mPlan:[0m 22 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m ecr_puller_role_arn = (known after apply)
  [32m+[0m[0m eks_cluster_name    = "health-eks-cluster"
  [32m+[0m[0m kubeconfig          = (sensitive value)
  [32m+[0m[0m private_subnet_ids  = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m public_subnet_ids   = [
      [32m+[0m[0m (known after apply),
      [32m+[0m[0m (known after apply),
    ]
  [32m+[0m[0m vpc_id              = (known after apply)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
::debug::Terraform exited with code 0.
::debug::stdout: [0m[1mdata.aws_caller_identity.current: Reading...[0m[0m%0A[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=154767946691][0m%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A  [32m+[0m create[0m%0A%0ATerraform will perform the following actions:%0A%0A[1m  # module.eks.aws_eks_cluster.eks_cluster[0m will be created%0A[0m  [32m+[0m[0m resource "aws_eks_cluster" "eks_cluster" {%0A      [32m+[0m[0m arn                           = (known after apply)%0A      [32m+[0m[0m bootstrap_self_managed_addons = true%0A      [32m+[0m[0m certificate_authority         = (known after apply)%0A      [32m+[0m[0m cluster_id                    = (known after apply)%0A      [32m+[0m[0m created_at                    = (known after apply)%0A      [32m+[0m[0m endpoint                      = (known after apply)%0A      [32m+[0m[0m id                            = (known after apply)%0A      [32m+[0m[0m identity                      = (known after apply)%0A      [32m+[0m[0m name                          = "health-eks-cluster"%0A      [32m+[0m[0m platform_version              = (known after apply)%0A      [32m+[0m[0m role_arn                      = (known after apply)%0A      [32m+[0m[0m status                        = (known after apply)%0A      [32m+[0m[0m tags_all                      = (known after apply)%0A      [32m+[0m[0m version                       = (known after apply)%0A%0A      [32m+[0m[0m access_config (known after apply)%0A%0A      [32m+[0m[0m kubernetes_network_config (known after apply)%0A%0A      [32m+[0m[0m upgrade_policy (known after apply)%0A%0A      [32m+[0m[0m vpc_config {%0A          [32m+[0m[0m cluster_security_group_id = (known after apply)%0A          [32m+[0m[0m endpoint_private_access   = false%0A          [32m+[0m[0m endpoint_public_access    = true%0A          [32m+[0m[0m public_access_cidrs       = (known after apply)%0A          [32m+[0m[0m subnet_ids                = (known after apply)%0A          [32m+[0m[0m vpc_id                    = (known after apply)%0A        }%0A    }%0A%0A[1m  # module.eks.aws_eks_fargate_profile.eks_fargate_profile[0m will be created%0A[0m  [32m+[0m[0m resource "aws_eks_fargate_profile" "eks_fargate_profile" {%0A      [32m+[0m[0m arn                    = (known after apply)%0A      [32m+[0m[0m cluster_name           = "health-eks-cluster"%0A      [32m+[0m[0m fargate_profile_name   = "fargate-profile"%0A      [32m+[0m[0m id                     = (known after apply)%0A      [32m+[0m[0m pod_execution_role_arn = (known after apply)%0A      [32m+[0m[0m status                 = (known after apply)%0A      [32m+[0m[0m subnet_ids             = (known after apply)%0A      [32m+[0m[0m tags_all               = (known after apply)%0A%0A      [32m+[0m[0m selector {%0A          [32m+[0m[0m namespace = "default"%0A        }%0A      [32m+[0m[0m selector {%0A          [32m+[0m[0m namespace = "kube-system"%0A        }%0A    }%0A%0A[1m  # module.eks.aws_security_group.fargate_sg[0m will be created%0A[0m  [32m+[0m[0m resource "aws_security_group" "fargate_sg" {%0A      [32m+[0m[0m arn                    = (known after apply)%0A      [32m+[0m[0m description            = "Managed by Terraform"%0A      [32m+[0m[0m egress                 = [%0A          [32m+[0m[0m {%0A              [32m+[0m[0m cidr_blocks      = [%0A                  [32m+[0m[0m "0.0.0.0/0",%0A                ]%0A              [32m+[0m[0m from_port        = 0%0A              [32m+[0m[0m ipv6_cidr_blocks = []%0A              [32m+[0m[0m prefix_list_ids  = []%0A              [32m+[0m[0m protocol         = "-1"%0A              [32m+[0m[0m security_groups  = []%0A              [32m+[0m[0m self             = false%0A              [32m+[0m[0m to_port          = 0%0A                [90m# (1 unchanged attribute hidden)[0m[0m%0A            },%0A        ]%0A      [32m+[0m[0m id                     = (known after apply)%0A      [32m+[0m[0m ingress                = [%0A          [32m+[0m[0m {%0A              [32m+[0m[0m cidr_blocks      = [%0A                  [32m+[0m[0m "0.0.0.0/0",%0A                ]%0A              [32m+[0m[0m from_port        = 3000%0A              [32m+[0m[0m ipv6_cidr_blocks = []%0A              [32m+[0m[0m prefix_list_ids  = []%0A              [32m+[0m[0m protocol         = "tcp"%0A              [32m+[0m[0m security_groups  = []%0A              [32m+[0m[0m self             = false%0A              [32m+[0m[0m to_port          = 3000%0A                [90m# (1 unchanged attribute hidden)[0m[0m%0A            },%0A          [32m+[0m[0m {%0A              [32m+[0m[0m cidr_blocks      = [%0A                  [32m+[0m[0m "0.0.0.0/0",%0A                ]%0A              [32m+[0m[0m from_port        = 3001%0A              [32m+[0m[0m ipv6_cidr_blocks = []%0A              [32m+[0m[0m prefix_list_ids  = []%0A              [32m+[0m[0m protocol         = "tcp"%0A              [32m+[0m[0m security_groups  = []%0A              [32m+[0m[0m self             = false%0A              [32m+[0m[0m to_port          = 3001%0A                [90m# (1 unchanged attribute hidden)[0m[0m%0A            },%0A          [32m+[0m[0m {%0A              [32m+[0m[0m cidr_blocks      = [%0A                  [32m+[0m[0m "0.0.0.0/0",%0A                ]%0A              [32m+[0m[0m from_port        = 443%0A              [32m+[0m[0m ipv6_cidr_blocks = []%0A              [32m+[0m[0m prefix_list_ids  = []%0A              [32m+[0m[0m protocol         = "tcp"%0A              [32m+[0m[0m security_groups  = []%0A              [32m+[0m[0m self             = false%0A              [32m+[0m[0m to_port          = 443%0A                [90m# (1 unchanged attribute hidden)[0m[0m%0A            },%0A          [32m+[0m[0m {%0A              [32m+[0m[0m cidr_blocks      = [%0A                  [32m+[0m[0m "0.0.0.0/0",%0A                ]%0A              [32m+[0m[0m from_port        = 80%0A              [32m+[0m[0m ipv6_cidr_blocks = []%0A              [32m+[0m[0m prefix_list_ids  = []%0A              [32m+[0m[0m protocol         = "tcp"%0A              [32m+[0m[0m security_groups  = []%0A              [32m+[0m[0m self             = false%0A              [32m+[0m[0m to_port          = 80%0A                [90m# (1 unchanged attribute hidden)[0m[0m%0A            },%0A        ]%0A      [32m+[0m[0m name                   = (known after apply)%0A      [32m+[0m[0m name_prefix            = "health-eks-cluster-fargate-sg-"%0A      [32m+[0m[0m owner_id               = (known after apply)%0A      [32m+[0m[0m revoke_rules_on_delete = false%0A      [32m+[0m[0m tags                   = {%0A          [32m+[0m[0m "Name" = "health-eks-cluster-fargate-sg"%0A        }%0A      [32m+[0m[0m tags_all               = {%0A          [32m+[0m[0m "Name" = "health-eks-cluster-fargate-sg"%0A        }%0A      [32m+[0m[0m vpc_id                 = (known after apply)%0A    }%0A%0A[1m  # module.iam.aws_iam_policy_attachment.ecr_puller_sa_policy_attachment[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "ecr_puller_sa_policy_attachment" {%0A      [32m+[0m[0m id         = (known after apply)%0A      [32m+[0m[0m name       = "health-eks-cluster-ecr-sa-policy-attachment"%0A      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"%0A      [32m+[0m[0m roles      = [%0A          [32m+[0m[0m "health-eks-cluster-ecr-sa-role",%0A        ]%0A    }%0A%0A[1m  # module.iam.aws_iam_policy_attachment.eks_cluster_policy_attachment[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "eks_cluster_policy_attachment" {%0A      [32m+[0m[0m id         = (known after apply)%0A      [32m+[0m[0m name       = "health-eks-cluster-cluster-policy-attachment"%0A      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"%0A      [32m+[0m[0m roles      = [%0A          [32m+[0m[0m "health-eks-cluster-cluster-role",%0A        ]%0A    }%0A%0A[1m  # module.iam.aws_iam_policy_attachment.eks_fargate_policy_attachment[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "eks_fargate_policy_attachment" {%0A      [32m+[0m[0m id         = (known after apply)%0A      [32m+[0m[0m name       = "health-eks-cluster-fargate-policy-attachment"%0A      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy"%0A      [32m+[0m[0m roles      = [%0A          [32m+[0m[0m "health-eks-cluster-fargate-role",%0A        ]%0A    }%0A%0A[1m  # module.iam.aws_iam_policy_attachment.eks_vpc_cni_policy_attachment[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_policy_attachment" "eks_vpc_cni_policy_attachment" {%0A      [32m+[0m[0m id         = (known after apply)%0A      [32m+[0m[0m name       = "health-eks-cluster-vpc-cni-policy-attachment"%0A      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"%0A      [32m+[0m[0m roles      = [%0A          [32m+[0m[0m "health-eks-cluster-cluster-role",%0A        ]%0A    }%0A%0A[1m  # module.iam.aws_iam_role.ecr_puller_sa_role[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_role" "ecr_puller_sa_role" {%0A      [32m+[0m[0m arn                   = (known after apply)%0A      [32m+[0m[0m assume_role_policy    = (known after apply)%0A      [32m+[0m[0m create_date           = (known after apply)%0A      [32m+[0m[0m force_detach_policies = false%0A      [32m+[0m[0m id                    = (known after apply)%0A      [32m+[0m[0m managed_policy_arns   = (known after apply)%0A      [32m+[0m[0m max_session_duration  = 3600%0A      [32m+[0m[0m name                  = "health-eks-cluster-ecr-sa-role"%0A      [32m+[0m[0m name_prefix           = (known after apply)%0A      [32m+[0m[0m path                  = "/"%0A      [32m+[0m[0m tags                  = {%0A          [32m+[0m[0m "Name" = "health-eks-cluster-ecr-sa-role"%0A        }%0A      [32m+[0m[0m tags_all              = {%0A          [32m+[0m[0m "Name" = "health-eks-cluster-ecr-sa-role"%0A        }%0A      [32m+[0m[0m unique_id             = (known after apply)%0A%0A      [32m+[0m[0m inline_policy (known after apply)%0A    }%0A%0A[1m  # module.iam.aws_iam_role.eks_cluster_role[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_role" "eks_cluster_role" {%0A      [32m+[0m[0m arn                   = (known after apply)%0A      [32m+[0m[0m assume_role_policy    = jsonencode(%0A            {%0A              [32m+[0m[0m Statement = [%0A                  [32m+[0m[0m {%0A                      [32m+[0m[0m Action    = "sts:AssumeRole"%0A                      [32m+[0m[0m Effect    = "Allow"%0A                      [32m+[0m[0m Principal = {%0A                          [32m+[0m[0m Service = "eks.amazonaws.com"%0A                        }%0A                    },%0A                ]%0A              [32m+[0m[0m Version   = "2012-10-17"%0A            }%0A        )%0A      [32m+[0m[0m create_date           = (known after apply)%0A      [32m+[0m[0m force_detach_policies = false%0A      [32m+[0m[0m id                    = (known after apply)%0A      [32m+[0m[0m managed_policy_arns   = (known after apply)%0A      [32m+[0m[0m max_session_duration  = 3600%0A      [32m+[0m[0m name                  = "health-eks-cluster-cluster-role"%0A      [32m+[0m[0m name_prefix           = (known after apply)%0A      [32m+[0m[0m path                  = "/"%0A      [32m+[0m[0m tags_all              = (known after apply)%0A      [32m+[0m[0m unique_id             = (known after apply)%0A%0A      [32m+[0m[0m inline_policy (known after apply)%0A    }%0A%0A[1m  # module.iam.aws_iam_role.eks_fargate_role[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_role" "eks_fargate_role" {%0A      [32m+[0m[0m arn                   = (known after apply)%0A      [32m+[0m[0m assume_role_policy    = jsonencode(%0A            {%0A              [32m+[0m[0m Statement = [%0A                  [32m+[0m[0m {%0A                      [32m+[0m[0m Action    = "sts:AssumeRole"%0A                      [32m+[0m[0m Effect    = "Allow"%0A                      [32m+[0m[0m Principal = {%0A                          [32m+[0m[0m Service = "eks-fargate-pods.amazonaws.com"%0A                        }%0A                    },%0A                ]%0A              [32m+[0m[0m Version   = "2012-10-17"%0A            }%0A        )%0A      [32m+[0m[0m create_date           = (known after apply)%0A      [32m+[0m[0m force_detach_policies = false%0A      [32m+[0m[0m id                    = (known after apply)%0A      [32m+[0m[0m managed_policy_arns   = (known after apply)%0A      [32m+[0m[0m max_session_duration  = 3600%0A      [32m+[0m[0m name                  = "health-eks-cluster-fargate-role"%0A      [32m+[0m[0m name_prefix           = (known after apply)%0A      [32m+[0m[0m path                  = "/"%0A      [32m+[0m[0m tags_all              = (known after apply)%0A      [32m+[0m[0m unique_id             = (known after apply)%0A%0A      [32m+[0m[0m inline_policy (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_eip.nat_eip[0m will be created%0A[0m  [32m+[0m[0m resource "aws_eip" "nat_eip" {%0A      [32m+[0m[0m allocation_id        = (known after apply)%0A      [32m+[0m[0m arn                  = (known after apply)%0A      [32m+[0m[0m association_id       = (known after apply)%0A      [32m+[0m[0m carrier_ip           = (known after apply)%0A      [32m+[0m[0m customer_owned_ip    = (known after apply)%0A      [32m+[0m[0m domain               = (known after apply)%0A      [32m+[0m[0m id                   = (known after apply)%0A      [32m+[0m[0m instance             = (known after apply)%0A      [32m+[0m[0m ipam_pool_id         = (known after apply)%0A      [32m+[0m[0m network_border_group = (known after apply)%0A      [32m+[0m[0m network_interface    = (known after apply)%0A      [32m+[0m[0m private_dns          = (known after apply)%0A      [32m+[0m[0m private_ip           = (known after apply)%0A      [32m+[0m[0m ptr_record           = (known after apply)%0A      [32m+[0m[0m public_dns           = (known after apply)%0A      [32m+[0m[0m public_ip            = (known after apply)%0A      [32m+[0m[0m public_ipv4_pool     = (known after apply)%0A      [32m+[0m[0m tags_all             = (known after apply)%0A      [32m+[0m[0m vpc                  = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_internet_gateway.test_igw[0m will be created%0A[0m  [32m+[0m[0m resource "aws_internet_gateway" "test_igw" {%0A      [32m+[0m[0m arn      = (known after apply)%0A      [32m+[0m[0m id       = (known after apply)%0A      [32m+[0m[0m owner_id = (known after apply)%0A      [32m+[0m[0m tags_all = (known after apply)%0A      [32m+[0m[0m vpc_id   = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_nat_gateway.nat_gw[0m will be created%0A[0m  [32m+[0m[0m resource "aws_nat_gateway" "nat_gw" {%0A      [32m+[0m[0m allocation_id                      = (known after apply)%0A      [32m+[0m[0m association_id                     = (known after apply)%0A      [32m+[0m[0m connectivity_type                  = "public"%0A      [32m+[0m[0m id                                 = (known after apply)%0A      [32m+[0m[0m network_interface_id               = (known after apply)%0A      [32m+[0m[0m private_ip                         = (known after apply)%0A      [32m+[0m[0m public_ip                          = (known after apply)%0A      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)%0A      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)%0A      [32m+[0m[0m subnet_id                          = (known after apply)%0A      [32m+[0m[0m tags_all                           = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_route_table.private_route_table[0m will be created%0A[0m  [32m+[0m[0m resource "aws_route_table" "private_route_table" {%0A      [32m+[0m[0m arn              = (known after apply)%0A      [32m+[0m[0m id               = (known after apply)%0A      [32m+[0m[0m owner_id         = (known after apply)%0A      [32m+[0m[0m propagating_vgws = (known after apply)%0A      [32m+[0m[0m route            = [%0A          [32m+[0m[0m {%0A              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"%0A              [32m+[0m[0m nat_gateway_id             = (known after apply)%0A                [90m# (11 unchanged attributes hidden)[0m[0m%0A            },%0A        ]%0A      [32m+[0m[0m tags_all         = (known after apply)%0A      [32m+[0m[0m vpc_id           = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_route_table.public_route_table[0m will be created%0A[0m  [32m+[0m[0m resource "aws_route_table" "public_route_table" {%0A      [32m+[0m[0m arn              = (known after apply)%0A      [32m+[0m[0m id               = (known after apply)%0A      [32m+[0m[0m owner_id         = (known after apply)%0A      [32m+[0m[0m propagating_vgws = (known after apply)%0A      [32m+[0m[0m route            = [%0A          [32m+[0m[0m {%0A              [32m+[0m[0m cidr_block                 = "0.0.0.0/0"%0A              [32m+[0m[0m gateway_id                 = (known after apply)%0A                [90m# (11 unchanged attributes hidden)[0m[0m%0A            },%0A        ]%0A      [32m+[0m[0m tags_all         = (known after apply)%0A      [32m+[0m[0m vpc_id           = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_route_table_association.public_route_association_1[0m will be created%0A[0m  [32m+[0m[0m resource "aws_route_table_association" "public_route_association_1" {%0A      [32m+[0m[0m id             = (known after apply)%0A      [32m+[0m[0m route_table_id = (known after apply)%0A      [32m+[0m[0m subnet_id      = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_route_table_association.public_route_association_2[0m will be created%0A[0m  [32m+[0m[0m resource "aws_route_table_association" "public_route_association_2" {%0A      [32m+[0m[0m id             = (known after apply)%0A      [32m+[0m[0m route_table_id = (known after apply)%0A      [32m+[0m[0m subnet_id      = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_subnet.private_subnet_1[0m will be created%0A[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_1" {%0A      [32m+[0m[0m arn                                            = (known after apply)%0A      [32m+[0m[0m assign_ipv6_address_on_creation                = false%0A      [32m+[0m[0m availability_zone                              = "us-east-1a"%0A      [32m+[0m[0m availability_zone_id                           = (known after apply)%0A      [32m+[0m[0m cidr_block                                     = "10.0.3.0/24"%0A      [32m+[0m[0m enable_dns64                                   = false%0A      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false%0A      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false%0A      [32m+[0m[0m id                                             = (known after apply)%0A      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)%0A      [32m+[0m[0m ipv6_native                                    = false%0A      [32m+[0m[0m map_public_ip_on_launch                        = false%0A      [32m+[0m[0m owner_id                                       = (known after apply)%0A      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)%0A      [32m+[0m[0m tags_all                                       = (known after apply)%0A      [32m+[0m[0m vpc_id                                         = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_subnet.private_subnet_2[0m will be created%0A[0m  [32m+[0m[0m resource "aws_subnet" "private_subnet_2" {%0A      [32m+[0m[0m arn                                            = (known after apply)%0A      [32m+[0m[0m assign_ipv6_address_on_creation                = false%0A      [32m+[0m[0m availability_zone                              = "us-east-1b"%0A      [32m+[0m[0m availability_zone_id                           = (known after apply)%0A      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"%0A      [32m+[0m[0m enable_dns64                                   = false%0A      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false%0A      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false%0A      [32m+[0m[0m id                                             = (known after apply)%0A      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)%0A      [32m+[0m[0m ipv6_native                                    = false%0A      [32m+[0m[0m map_public_ip_on_launch                        = false%0A      [32m+[0m[0m owner_id                                       = (known after apply)%0A      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)%0A      [32m+[0m[0m tags_all                                       = (known after apply)%0A      [32m+[0m[0m vpc_id                                         = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_subnet.public_subnet_1[0m will be created%0A[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_1" {%0A      [32m+[0m[0m arn                                            = (known after apply)%0A      [32m+[0m[0m assign_ipv6_address_on_creation                = false%0A      [32m+[0m[0m availability_zone                              = "us-east-1a"%0A      [32m+[0m[0m availability_zone_id                           = (known after apply)%0A      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"%0A      [32m+[0m[0m enable_dns64                                   = false%0A      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false%0A      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false%0A      [32m+[0m[0m id                                             = (known after apply)%0A      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)%0A      [32m+[0m[0m ipv6_native                                    = false%0A      [32m+[0m[0m map_public_ip_on_launch                        = true%0A      [32m+[0m[0m owner_id                                       = (known after apply)%0A      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)%0A      [32m+[0m[0m tags_all                                       = (known after apply)%0A      [32m+[0m[0m vpc_id                                         = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_subnet.public_subnet_2[0m will be created%0A[0m  [32m+[0m[0m resource "aws_subnet" "public_subnet_2" {%0A      [32m+[0m[0m arn                                            = (known after apply)%0A      [32m+[0m[0m assign_ipv6_address_on_creation                = false%0A      [32m+[0m[0m availability_zone                              = "us-east-1b"%0A      [32m+[0m[0m availability_zone_id                           = (known after apply)%0A      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"%0A      [32m+[0m[0m enable_dns64                                   = false%0A      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false%0A      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false%0A      [32m+[0m[0m id                                             = (known after apply)%0A      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)%0A      [32m+[0m[0m ipv6_native                                    = false%0A      [32m+[0m[0m map_public_ip_on_launch                        = true%0A      [32m+[0m[0m owner_id                                       = (known after apply)%0A      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)%0A      [32m+[0m[0m tags_all                                       = (known after apply)%0A      [32m+[0m[0m vpc_id                                         = (known after apply)%0A    }%0A%0A[1m  # module.vpc.aws_vpc.test_vpc[0m will be created%0A[0m  [32m+[0m[0m resource "aws_vpc" "test_vpc" {%0A      [32m+[0m[0m arn                                  = (known after apply)%0A      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"%0A      [32m+[0m[0m default_network_acl_id               = (known after apply)%0A      [32m+[0m[0m default_route_table_id               = (known after apply)%0A      [32m+[0m[0m default_security_group_id            = (known after apply)%0A      [32m+[0m[0m dhcp_options_id                      = (known after apply)%0A      [32m+[0m[0m enable_dns_hostnames                 = (known after apply)%0A      [32m+[0m[0m enable_dns_support                   = true%0A      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)%0A      [32m+[0m[0m id                                   = (known after apply)%0A      [32m+[0m[0m instance_tenancy                     = "default"%0A      [32m+[0m[0m ipv6_association_id                  = (known after apply)%0A      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)%0A      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)%0A      [32m+[0m[0m main_route_table_id                  = (known after apply)%0A      [32m+[0m[0m owner_id                             = (known after apply)%0A      [32m+[0m[0m tags_all                             = (known after apply)%0A    }%0A%0A[1mPlan:[0m 22 to add, 0 to change, 0 to destroy.%0A[0m%0AChanges to Outputs:%0A  [32m+[0m[0m ecr_puller_role_arn = (known after apply)%0A  [32m+[0m[0m eks_cluster_name    = "health-eks-cluster"%0A  [32m+[0m[0m kubeconfig          = (sensitive value)%0A  [32m+[0m[0m private_subnet_ids  = [%0A      [32m+[0m[0m (known after apply),%0A      [32m+[0m[0m (known after apply),%0A    ]%0A  [32m+[0m[0m public_subnet_ids   = [%0A      [32m+[0m[0m (known after apply),%0A      [32m+[0m[0m (known after apply),%0A    ]%0A  [32m+[0m[0m vpc_id              = (known after apply)%0A[90m%0A─────────────────────────────────────────────────────────────────────────────[0m%0A%0ANote: You didn't use the -out option to save this plan, so Terraform can't%0Aguarantee to take exactly these actions if you run "terraform apply" now.%0A
::debug::stderr: 
::debug::exitcode: 0
